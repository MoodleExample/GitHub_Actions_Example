on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    branches: [ master ]

env:
  G-Test-Package: release-1.10.0.tar.gz
  C-Test-Result-File: result-C.json
  CC-Test-Result-File: result-CC.json
  DIST_FILE: CI-Result.md
  WORK_DIR: .wiki
  
jobs:
  Build-CC:
    runs-on: ubuntu-latest
    steps:
    - name: Download, configure and install gtest
      run: |
        wget https://github.com/google/googletest/archive/${{ env.G-Test-Package }}
        tar xf ${{ env.G-Test-Package }}
        cd googletest-release-1.10.0
        cmake -DBUILD_SHARED_LIBS=OFF .
        sudo make install

    - name: Checkout the project
      uses: actions/checkout@v2

    - name: Build
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Werror" ..
        make
    - name: Google Test
      run: |
        /home/runner/work/GitHub_Actions_Example/GitHub_Actions_Example/build/test/github_actions_gtest_example.test --gtest_output=json:./${{ env.CC-Test-Result-File }}
    - name: Save Test Result
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: TestResult
        path: ./${{ env.CC-Test-Result-File }}
  
  Build-C:
    runs-on: ubuntu-latest
    steps:
    - name: Download, configure and install gtest
      run: |
        wget https://github.com/google/googletest/archive/${{ env.G-Test-Package }}
        tar xf ${{ env.G-Test-Package }}
        sudo cp -rf googletest-release-1.10.0 /usr/local
        cd googletest-release-1.10.0
        cmake -DBUILD_SHARED_LIBS=OFF .
        sudo make install

    - name: Checkout the project
      uses: actions/checkout@v2

    - name: Build
      run: |
        cd src/func1
        make
    - name: Google Test
      run: |
        ls ./src/func1
        ls ./test
        ./src/func1/func1.test --gtest_output=json:./${{ env.C-Test-Result-File }}
    - name: Save Test Result
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: TestResult
        path: ./${{ env.C-Test-Result-File }}
        
  Inspection:
    if: ${{ always() }}
    needs: [Build-CC, Build-C]
    runs-on: ubuntu-latest
    steps:
      - name: Load Test Result
        uses: actions/download-artifact@v3
        with:
          name: TestResult
      - name: Clone Wiki
        uses: actions/checkout@v2
        with:
          repository: ${{github.repository}}.wiki
          path: .wiki
          token: ${{ secrets.TOKEN_FOR_WIKI }}

      - name: Check CI-Result.md existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: ${{ env.WORK_DIR }}/${{ env.DIST_FILE }}

      - name: File exists
        if: steps.check_files.outputs.files_exists == 'false'
        run: |
          echo "files not exists!"
          touch ${{ env.WORK_DIR }}/${{ env.DIST_FILE }}
        
      - name: Analyze Google test Result
        run: |
          sudo apt-get update
          sudo apt-get install jq
          FILES="./*"
          for FILEPATH in $FILES; do
            array=()
            RESULT=`cat $FILEPATH | jq -c '.testsuites[].testsuite[] | .name , (.failures | length)' | xargs -n2 | sed "s/ /,/g"`
            array=("${array[@]}" $RESULT)
            TEST_DATE=`cat $FILEPATH | jq -c '.testsuites[] | .timestamp'`
            line_no=`wc -l ${{ env.WORK_DIR }}/${{ env.DIST_FILE }} | cut -d " " -f 1`
            if [ $line_no -eq 0 ]; then
              echo -e "\n" > ${{ env.WORK_DIR }}/${{ env.DIST_FILE }}
            fi
            sed -i -e "1i ## $FILEPATH ($TEST_DATE)" ${{ env.WORK_DIR }}/${{ env.DIST_FILE }}
            sed -i -e "2i | Test Name | Test Result |" ${{ env.WORK_DIR }}/${{ env.DIST_FILE }}
            sed -i -e "3i |-----------|-------------|" ${{ env.WORK_DIR }}/${{ env.DIST_FILE }}
            count=0
            for e in ${array[@]}; do
              name=`echo ${e} | cut -d "," -f 1`
              result=`echo ${e} | cut -d "," -f 2`
              if [ $result -eq 0 ]; then
                result_mark=":heavy_check_mark:"
              else
                result_mark=":x:"
              fi
            done
          done    
          cat ${{ env.WORK_DIR }}/${{ env.DIST_FILE }}
      - name: Configuare the Github Wiki identity
        working-directory: .wiki
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Update Wiki Page
        working-directory: .wiki
        run: |
          git add ./CI-Result.md
          git commit --allow-empty -m "Update the wiki Page by Github Actions (${GITHUB_WORKFLOW})"
          git push
        
